<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Even - A super concise theme for Hugo</title>
    <link>https://renzhe00.github.io/post/</link>
    <description>Recent content in Posts on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>author.name</copyright>
    <lastBuildDate>Fri, 01 Feb 2019 20:44:29 +0800</lastBuildDate>
    
	<atom:link href="https://renzhe00.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>「数据结构 五」C 语言实现队列</title>
      <link>https://renzhe00.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%94c-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</link>
      <pubDate>Fri, 01 Feb 2019 20:44:29 +0800</pubDate>
      
      <guid>https://renzhe00.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%94c-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</guid>
      <description>队列（queue），是先进先出（FIFO, First-In-First-Out）的线性表。在具体应用中通常用链表或者数组来实现。队列只允许在</description>
    </item>
    
    <item>
      <title>「数据结构 四」C 语言实现栈</title>
      <link>https://renzhe00.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%9Bc-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%A0%88/</link>
      <pubDate>Fri, 01 Feb 2019 20:44:26 +0800</pubDate>
      
      <guid>https://renzhe00.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%9Bc-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%A0%88/</guid>
      <description>栈（stack）是限定在表尾进行插入或删除操作的线性表。因此，栈的表尾端具有特殊的含义，称为栈顶（top），相对应，表头端的称为栈底（bot</description>
    </item>
    
    <item>
      <title>「数据结构 三」C 语言实现循环链表</title>
      <link>https://renzhe00.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%B8%89c-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Fri, 01 Feb 2019 20:44:23 +0800</pubDate>
      
      <guid>https://renzhe00.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%B8%89c-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</guid>
      <description>本文主要讲述循环链表，双向链表。 循环链表 循环链表是一种链式存储结构，它的最后一个结点指向头结点，形成一个环。因此，从循环链表中的任何一个结点</description>
    </item>
    
    <item>
      <title>「数据结构 二」C 语言实现动态单链表</title>
      <link>https://renzhe00.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8Cc-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%8D%95%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Fri, 01 Feb 2019 20:36:03 +0800</pubDate>
      
      <guid>https://renzhe00.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8Cc-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%8D%95%E9%93%BE%E8%A1%A8/</guid>
      <description>用 C 语言实现链式存储结构的线性表，即单链表。本文实现了动态单链表，关于静态单链表这里不再细说了。 关于抽象数据类型的定义这里就不再粘贴处了，可</description>
    </item>
    
    <item>
      <title>「数据结构 一」C 语言实现顺序表</title>
      <link>https://renzhe00.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%B8%80c-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E9%A1%BA%E5%BA%8F%E8%A1%A8/</link>
      <pubDate>Fri, 01 Feb 2019 20:32:52 +0800</pubDate>
      
      <guid>https://renzhe00.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%B8%80c-%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E9%A1%BA%E5%BA%8F%E8%A1%A8/</guid>
      <description>用 C 语言实现顺序存储结构的线性表，即顺序表。 下面是线性表的抽象数据类型定义： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32</description>
    </item>
    
    <item>
      <title>Logistic_Regression_with_a_Neural_Network</title>
      <link>https://renzhe00.github.io/post/%E5%8D%95%E4%B8%AA%E7%A5%9E%E7%BB%8F%E5%85%83%E7%9A%84-logistic-regression/</link>
      <pubDate>Tue, 29 Jan 2019 19:49:46 +0800</pubDate>
      
      <guid>https://renzhe00.github.io/post/%E5%8D%95%E4%B8%AA%E7%A5%9E%E7%BB%8F%E5%85%83%E7%9A%84-logistic-regression/</guid>
      <description>单个神经元的 Logistic Regression Logistic Regression $$ z^{(i)} = w^T x^{(i)} + b \tag{1} $$ $$ \hat{y}^{(i)} = a^{(i)} = sigmoid(z^{(i)})\tag{2} $$ $$ \mathcal{L}(a^{(i)}, y^{(i)}) = - y^{(i)} \log(a^{(i)}) - (1-y^{(i)} ) \log(1-a^{(i)})\tag{3} $$ 成本函数： $$ J = \frac{1}{m} \sum_{i=1}^m \mathcal{L}(a^{(i)}, y^{(i)})\tag{4} $$ 激活函数采用 sigmoid 函数： $$ sigmoid( w^T x + b) = \frac{1}{1 +</description>
    </item>
    
  </channel>
</rss>